# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (6)
# #########################################################################

class Resume(BaseModel):
    name: str
    email: str
    experience: typing.List[str]
    skills: typing.List[str]

class RowData(BaseModel):
    row_index: int
    data: typing.Dict[str, str]

class Transformation(BaseModel):
    row_index: int
    column: str
    old_value: str
    new_value: str
    confidence: float

class TransformationResult(BaseModel):
    transformations: typing.List["Transformation"]

class ValidationError(BaseModel):
    row_index: int
    column_key: str
    value: str
    error_message: str

class ValidationRule(BaseModel):
    error_type: str
    type: str
    rule: str
    pattern: typing.Optional[str] = None
    regex: typing.Optional[str] = None
    regex_description: typing.Optional[str] = None
    valid_examples: typing.List[str]
    invalid_examples: typing.List[str]
    common_fixes: typing.Dict[str, str]

# #########################################################################
# Generated type aliases (0)
# #########################################################################
