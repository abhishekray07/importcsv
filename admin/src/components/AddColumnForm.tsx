'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Plus } from 'lucide-react';
import ValidationBuilder, { Validator } from './ValidationBuilder';
import TransformationBuilder, { Transformation } from './TransformationBuilder';

// Define the ImporterField interface (cleaned up to match what frontend actually uses)
export interface ImporterField {
  name: string;                      // Column name as in CSV
  display_name: string;              // Display name for users
  type: string;                      // text, number, date, email, phone, boolean, select, custom_regex
  validators?: Validator[];          // Array of validation rules
  transformations?: Transformation[]; // Array of transformation rules
  options?: string[];                // Options for select fields
}

interface AddColumnFormProps {
  onAddColumn: (field: ImporterField) => void;
  existingFields: ImporterField[];
  className?: string;
  compact?: boolean;
  initialField?: ImporterField; // For editing existing columns
  submitButtonText?: string; // Custom text for submit button
}

export default function AddColumnForm({ 
  onAddColumn, 
  existingFields, 
  className = '', 
  compact = false,
  initialField,
  submitButtonText = 'Add Column'
}: AddColumnFormProps) {
  const [fieldErrors, setFieldErrors] = useState<Record<string, string>>({});
  const [newField, setNewField] = useState<ImporterField>(initialField || {
    name: '',
    display_name: '',
    type: 'text',
    validators: [],
    transformations: [],
    options: []
  });
  const [activeTab, setActiveTab] = useState('basic');
  
  // Helper function to generate display name from column name
  const generateDisplayName = (columnName: string): string => {
    // Convert snake_case, kebab-case, or camelCase to Title Case
    return columnName
      .replace(/[-_]/g, ' ') // Replace - and _ with spaces
      .replace(/([a-z])([A-Z])/g, '$1 $2') // Add space before capital letters in camelCase
      .split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(' ')
      .trim();
  };

  // Handle field input changes
  const handleFieldInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    
    if (name === 'name') {
      // Remove spaces from column name
      const cleanedName = value.replace(/\s/g, '');
      
      // Auto-populate display_name if it's empty or was auto-generated
      const currentDisplayName = newField.display_name;
      const wasAutoGenerated = currentDisplayName === generateDisplayName(newField.name);
      
      setNewField(prev => ({
        ...prev,
        name: cleanedName,
        // Only auto-update display_name if it's empty or was previously auto-generated
        display_name: (!currentDisplayName || wasAutoGenerated) 
          ? generateDisplayName(cleanedName) 
          : currentDisplayName
      }));
    } else {
      setNewField(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  // Handle field type change
  const handleTypeChange = (value: string) => {
    setNewField(prev => ({
      ...prev,
      type: value,
      validation_format: '',
      template: value === 'boolean' ? 'true/false' : ''
    }));
  };

  // Add field handler
  const addFieldHandler = () => {
    // Reset previous errors
    const errors: Record<string, string> = {};
    let hasErrors = false;
    
    // Basic validation
    if (!newField.name) {
      errors.name = 'Column name is required';
      hasErrors = true;
    }
    
    if (!newField.type) {
      errors.type = 'Column type is required';
      hasErrors = true;
    }
    
    // Check for duplicate field names (skip this check when editing if name hasn't changed)
    if (existingFields.some(f => f.name === newField.name)) {
      errors.name = `Column name '${newField.name}' already exists`;
      hasErrors = true;
    }
    
    // For select type, ensure options are set
    if (newField.type === 'select' && (!newField.options || newField.options.length === 0)) {
      // Check if validation_format has options (backward compatibility)
      if (!newField.validation_format) {
        errors.validation_format = 'Please provide options for the select field';
        hasErrors = true;
      } else {
        // Convert validation_format to options array
        newField.options = newField.validation_format.split(',').map(o => o.trim());
      }
    }
    
    // For custom regex type, ensure validation_format is set and is a valid regex
    if (newField.type === 'custom_regex') {
      if (!newField.validation_format) {
        errors.validation_format = 'Please provide a regular expression pattern';
        hasErrors = true;
      } else {
        // Validate the regex pattern
        try {
          new RegExp(newField.validation_format);
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'Invalid pattern';
          errors.validation_format = `Invalid regular expression: ${errorMessage}`;
          hasErrors = true;
        }
      }
    }
    
    // If there are errors, update state and return
    if (hasErrors) {
      setFieldErrors(errors);
      return;
    }
    
    // Call the parent handler
    onAddColumn({ ...newField });
    
    // Reset the form
    setNewField({
      name: '',
      display_name: '',
      type: 'text',
      validators: [],
      transformations: [],
      options: []
    });
    
    // Clear any errors
    setFieldErrors({});
  };

  return (
    <div className={`${className}`}>
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="basic">Basic Info</TabsTrigger>
          <TabsTrigger value="validation">Validation</TabsTrigger>
          <TabsTrigger value="transformation">Transformation</TabsTrigger>
        </TabsList>
        
        <TabsContent value="basic" className="space-y-4 mt-4">
          <div className={`${compact ? 'space-y-4' : 'grid grid-cols-1 md:grid-cols-2 gap-4'}`}>
        {/* Column Name */}
        <div className="space-y-2">
          <Label htmlFor="fieldName" className="text-base font-medium">Column Name</Label>
          <Input
            id="fieldName"
            name="name"
            value={newField.name}
            onChange={handleFieldInputChange}
            placeholder="e.g. email, first_name"
            className={`mt-1 ${fieldErrors.name ? 'border-red-500' : ''}`}
            required
          />
          {fieldErrors.name ? (
            <p className="text-sm text-red-500 mt-1">{fieldErrors.name}</p>
          ) : (
            <p className="text-sm text-gray-500 mt-1">Input the column name exactly as in your CSV file.</p>
          )}
        </div>
        
        {/* Display Name */}
        <div className="space-y-2">
          <Label htmlFor="fieldDisplayName">Display Name</Label>
          <Input
            id="fieldDisplayName"
            name="display_name"
            value={newField.display_name}
            onChange={handleFieldInputChange}
            placeholder="e.g. Email Address"
            className="mt-1"
          />
          <p className="text-sm text-gray-500 mt-1">Optional display name for users.</p>
        </div>
        
        {/* Format */}
        <div className="space-y-2">
          <Label htmlFor="fieldType">Format</Label>
          <Select
            value={newField.type}
            onValueChange={handleTypeChange}
          >
            <SelectTrigger id="fieldType" className={`mt-1 ${fieldErrors.type ? 'border-red-500' : ''}`}>
              <SelectValue placeholder="Select a format" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="text">Text (any value)</SelectItem>
              <SelectItem value="number">Number</SelectItem>
              <SelectItem value="date">Date</SelectItem>
              <SelectItem value="email">Email</SelectItem>
              <SelectItem value="phone">Phone Number</SelectItem>
              <SelectItem value="boolean">Boolean</SelectItem>
              <SelectItem value="select">Select (options)</SelectItem>
              <SelectItem value="custom_regex">Custom Regular Expression</SelectItem>
            </SelectContent>
          </Select>
          {fieldErrors.type && (
            <p className="text-sm text-red-500 mt-1">{fieldErrors.type}</p>
          )}
        </div>
        
        {/* Options for Select type */}
        {newField.type === 'select' && (
          <div className="space-y-2">
            <Label htmlFor="fieldOptions">Options</Label>
            <Input
              id="fieldOptions"
              name="validation_format"
              value={newField.validation_format || ''}
              onChange={handleFieldInputChange}
              placeholder="blue,red,yellow,white"
              className={`mt-1 ${fieldErrors.validation_format ? 'border-red-500' : ''}`}
              required
            />
            {fieldErrors.validation_format ? (
              <p className="text-sm text-red-500 mt-1">{fieldErrors.validation_format}</p>
            ) : (
              <p className="text-sm text-gray-500 mt-1">Comma separated list of options</p>
            )}
            
            {/* Example of how the options will appear */}
            {newField.validation_format && (
              <div className="mt-3 p-3 bg-gray-50 rounded-md border border-gray-200">
                <p className="text-sm font-medium mb-2">Preview:</p>
                <div className="flex flex-wrap gap-2">
                  {newField.validation_format.split(',').map((option, index) => (
                    <span 
                      key={index} 
                      className="px-2 py-1 bg-blue-100 text-blue-800 rounded-md text-sm"
                    >
                      {option.trim()}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
        
        {/* Template for Boolean type */}
        {newField.type === 'boolean' && (
          <div className="space-y-2">
            <Label htmlFor="fieldTemplate">Boolean Format</Label>
            <Select
              value={newField.template || 'true/false'}
              onValueChange={(value) => setNewField(prev => ({
                ...prev,
                template: value
              }))}
            >
              <SelectTrigger id="fieldTemplate" className="mt-1">
                <SelectValue placeholder="Choose template" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="true/false">true/false</SelectItem>
                <SelectItem value="yes/no">yes/no</SelectItem>
                <SelectItem value="1/0">1/0</SelectItem>
              </SelectContent>
            </Select>
            <p className="text-sm text-gray-500 mt-1">Format for boolean values in CSV</p>
          </div>
        )}
        
        {/* Custom Regular Expression */}
        {newField.type === 'custom_regex' && (
          <div className="space-y-2">
            <Label htmlFor="fieldRegex">Regular Expression</Label>
            <Input
              id="fieldRegex"
              name="validation_format"
              value={newField.validation_format || ''}
              onChange={handleFieldInputChange}
              placeholder="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
              className={`mt-1 ${fieldErrors.validation_format ? 'border-red-500' : ''}`}
              required
            />
            {fieldErrors.validation_format ? (
              <p className="text-sm text-red-500 mt-1">{fieldErrors.validation_format}</p>
            ) : (
              <p className="text-sm text-gray-500 mt-1">Enter a valid regular expression pattern</p>
            )}
          </div>
        )}
        
          </div>
        </TabsContent>
        
        <TabsContent value="validation" className="mt-4">
          <ValidationBuilder
            validators={newField.validators || []}
            onChange={(validators) => {
              setNewField(prev => ({ 
                ...prev, 
                validators
              }));
            }}
            fieldType={newField.type}
          />
        </TabsContent>
        
        <TabsContent value="transformation" className="mt-4">
          <TransformationBuilder
            transformations={newField.transformations || []}
            onChange={(transformations) => setNewField(prev => ({ ...prev, transformations }))}
            fieldType={newField.type}
          />
        </TabsContent>
      </Tabs>
      
      <Button 
        type="button"
        onClick={addFieldHandler}
        className="mt-6 w-full"
      >
        <Plus className="h-4 w-4 mr-1" />
        {submitButtonText}
      </Button>
    </div>
  );
}
